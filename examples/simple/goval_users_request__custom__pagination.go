// Code generated by goval. DO NOT EDIT.
// Used flags: -d -t UsersRequest -t Custom -t Pagination

package main

import "github.com/negasus/goval"

func (model *Pagination) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Page
		if model.Page < 0 {
			errors["page"] = append(errors["page"], goval.Error{
				Type: goval.ErrorTypeMinNumeric,
				Values: map[string]any{
					"field": "page",
					"min":   0,
				},
			})
		}
	}
	{ // PerPage
		var found bool
		for _, v := range []int{10, 50, 100} {
			if model.PerPage == v {
				found = true
				break
			}
		}
		if !found {
			errors["perpage"] = append(errors["perpage"], goval.Error{
				Type: goval.ErrorTypeInvalid,
				Values: map[string]any{
					"field": "perpage",
				},
			})
		}
	}

	return errors
}

func (model *Custom) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Index
		if model.Index < 50 {
			errors["index"] = append(errors["index"], goval.Error{
				Type: goval.ErrorTypeMinNumeric,
				Values: map[string]any{
					"field": "index",
					"min":   50,
				},
			})
		}
	}

	return errors
}

func (model *UsersRequest) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Pagination
		for k, v := range model.Pagination.Validate() {
			errors[k] = append(errors[k], v...)
		}
	}
	{ // Field
		var found bool
		for _, v := range fields {
			if model.Field == v {
				found = true
				break
			}
		}
		if !found {
			errors["field"] = append(errors["field"], goval.Error{
				Type: goval.ErrorTypeInvalid,
				Values: map[string]any{
					"field": "field",
				},
			})
		}
	}
	{ // Type
		var found bool
		for _, v := range []string{"foo", "bar"} {
			if model.Type == v {
				found = true
				break
			}
		}
		if !found {
			errors["type"] = append(errors["type"], goval.Error{
				Type: goval.ErrorTypeInvalid,
				Values: map[string]any{
					"field": "type",
				},
			})
		}
	}
	{ // ID
		if model.ID < 1 {
			errors["id"] = append(errors["id"], goval.Error{
				Type: goval.ErrorTypeMinNumeric,
				Values: map[string]any{
					"field": "id",
					"min":   1,
				},
			})
		}
	}
	{ // Custom
		for k, v := range model.customValidate() {
			errors[k] = append(errors[k], v...)
		}
	}
	{ // Custom2
		for k, v := range model.Custom2.customValidate() {
			errors[k] = append(errors[k], v...)
		}
	}

	return errors
}
