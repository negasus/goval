// Code generated by goval. DO NOT EDIT.
// Used flags: -t CompareInIntVar -t CompareInIntVarSlice -t CompareInInt -t CompareInIntSlice -t CompareInStringVar -t CompareInString -t CompareInStringVarSlice -t CompareInStringSlice -o goval_request_in.go

package tests

import (
	"github.com/negasus/goval"
	"slices"
)

func (model *CompareInIntVar) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // ID
		if !slices.Contains(compareIntVarData, model.ID) {
			errors["id"] = append(errors["id"], goval.Error{
				Type: goval.ErrorTypeIn,
				Values: map[string]any{
					"field": "id",
				},
			})
		}
	}

	return errors
}

func (model *CompareInIntVarSlice) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // ID
		for _, v := range model.ID {
			if !slices.Contains(compareIntVarData, v) {
				errors["id"] = append(errors["id"], goval.Error{
					Type: goval.ErrorTypeIn,
					Values: map[string]any{
						"field": "id",
					},
				})
			}
		}
	}

	return errors
}

func (model *CompareInInt) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // ID
		if !slices.Contains([]int{10, 20, 30}, model.ID) {
			errors["id"] = append(errors["id"], goval.Error{
				Type: goval.ErrorTypeIn,
				Values: map[string]any{
					"field": "id",
				},
			})
		}
	}

	return errors
}

func (model *CompareInIntSlice) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // ID
		for _, v := range model.ID {
			if !slices.Contains([]int{10, 20, 30}, v) {
				errors["id"] = append(errors["id"], goval.Error{
					Type: goval.ErrorTypeIn,
					Values: map[string]any{
						"field": "id",
					},
				})
			}
		}
	}

	return errors
}

func (model *CompareInStringVar) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Name
		if !slices.Contains(compareStringVarData, model.Name) {
			errors["name"] = append(errors["name"], goval.Error{
				Type: goval.ErrorTypeIn,
				Values: map[string]any{
					"field": "name",
				},
			})
		}
	}

	return errors
}

func (model *CompareInStringVarSlice) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Name
		for _, v := range model.Name {
			if !slices.Contains(compareStringVarData, v) {
				errors["name"] = append(errors["name"], goval.Error{
					Type: goval.ErrorTypeIn,
					Values: map[string]any{
						"field": "name",
					},
				})
			}
		}
	}

	return errors
}

func (model *CompareInString) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Name
		if !slices.Contains([]string{"aa", "bb", "cc"}, model.Name) {
			errors["name"] = append(errors["name"], goval.Error{
				Type: goval.ErrorTypeIn,
				Values: map[string]any{
					"field": "name",
				},
			})
		}
	}

	return errors
}

func (model *CompareInStringSlice) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Name
		for _, v := range model.Name {
			if !slices.Contains([]string{"aa", "bb", "cc"}, v) {
				errors["name"] = append(errors["name"], goval.Error{
					Type: goval.ErrorTypeIn,
					Values: map[string]any{
						"field": "name",
					},
				})
			}
		}
	}

	return errors
}
