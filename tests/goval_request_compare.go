// Code generated by github.com/negasus/goval. DO NOT EDIT.
// Used flags: -t RequestInt -t RequestFloat -t RequestString -t RequestStringArray -t RequestIntSlice -o goval_request_compare.go

package tests

import (
	"github.com/negasus/goval"
)

func (model *RequestInt) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // ID
		if model.ID < 1 {
			errors["id"] = append(errors["id"], goval.Error{
				Type: goval.ErrorTypeMinNumeric,
				Values: map[string]any{
					"field":      "id",
					"rule_value": 1,
				},
			})
		}
	}
	{ // ID
		if model.ID > 10 {
			errors["id"] = append(errors["id"], goval.Error{
				Type: goval.ErrorTypeMaxNumeric,
				Values: map[string]any{
					"field":      "id",
					"rule_value": 10,
				},
			})
		}
	}

	return errors
}

func (model *RequestFloat) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Price
		if model.Price < 10.5 {
			errors["price"] = append(errors["price"], goval.Error{
				Type: goval.ErrorTypeMinNumeric,
				Values: map[string]any{
					"field":      "price",
					"rule_value": 10.5,
				},
			})
		}
	}
	{ // Price
		if model.Price > 20.5 {
			errors["price"] = append(errors["price"], goval.Error{
				Type: goval.ErrorTypeMaxNumeric,
				Values: map[string]any{
					"field":      "price",
					"rule_value": 20.5,
				},
			})
		}
	}

	return errors
}

func (model *RequestString) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Name
		if len(model.Name) < 3 {
			errors["name"] = append(errors["name"], goval.Error{
				Type: goval.ErrorTypeMinString,
				Values: map[string]any{
					"field":      "name",
					"rule_value": 3,
				},
			})
		}
	}
	{ // Name
		if len(model.Name) > 10 {
			errors["name"] = append(errors["name"], goval.Error{
				Type: goval.ErrorTypeMaxString,
				Values: map[string]any{
					"field":      "name",
					"rule_value": 10,
				},
			})
		}
	}

	return errors
}

func (model *RequestStringArray) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // Keys
		if len(model.Keys) < 3 {
			errors["keys"] = append(errors["keys"], goval.Error{
				Type: goval.ErrorTypeMinArray,
				Values: map[string]any{
					"field":      "keys",
					"rule_value": 3,
				},
			})
		}
	}
	{ // Keys
		if len(model.Keys) > 10 {
			errors["keys"] = append(errors["keys"], goval.Error{
				Type: goval.ErrorTypeMaxArray,
				Values: map[string]any{
					"field":      "keys",
					"rule_value": 10,
				},
			})
		}
	}

	return errors
}

func (model *RequestIntSlice) Validate() goval.Errors {
	errors := goval.Errors{}

	{ // IDs
		if len(model.IDs) < 1 {
			errors["ids"] = append(errors["ids"], goval.Error{
				Type: goval.ErrorTypeMinArray,
				Values: map[string]any{
					"field":      "ids",
					"rule_value": 1,
				},
			})
		}
	}
	{ // IDs
		if len(model.IDs) > 10 {
			errors["ids"] = append(errors["ids"], goval.Error{
				Type: goval.ErrorTypeMaxArray,
				Values: map[string]any{
					"field":      "ids",
					"rule_value": 10,
				},
			})
		}
	}

	return errors
}
