// Code generated by github.com/negasus/goval. DO NOT EDIT.
// Used flags: -d -t Request -t Inline

package string_in

import (
	"github.com/negasus/goval"
)

func (model *Inline) Validate() *goval.Errors {
	var errors []goval.Error

	{ // ID
		if model.ID < 0 {
			errors = append(errors, goval.Error{
				Type:  "min_numeric",
				Field: "id",
				Values: map[string]any{
					"field":      "id",
					"rule_value": 0,
				},
				Path: []string{},
			})
		}
	}

	if len(errors) == 0 {
		return nil
	}

	return &goval.Errors{Errors: errors}
}

func (model *Request) Validate() *goval.Errors {
	var errors []goval.Error

	{ // Inline (embedded)
		errs := model.Inline.Validate()
		if errs != nil {
			for _, e := range errs.Errors {
				errors = append(errors, goval.Error{
					Type:   e.Type,
					Field:  e.Field,
					Values: e.Values,
					Path:   []string{"Inline", e.Field},
				})
			}
		}
	}

	if len(errors) == 0 {
		return nil
	}

	return &goval.Errors{Errors: errors}
}
